define([
    'jquery',
    'lodash',
    'i18n',
    'taoQtiItem/qtiCreator/widgets/states/factory',
    'taoQtiItem/qtiCreator/widgets/interactions/blockInteraction/states/Question',
    'taoQtiItem/qtiCreator/widgets/helpers/formElement',
    'taoQtiItem/qtiCommonRenderer/renderers/interactions/ExtendedTextInteraction',
    'tpl!taoQtiItem/qtiCreator/tpl/forms/interactions/extendedText'
], function($, _, __, stateFactory, Question, formElement, renderer, formTpl){
    'use strict';
    var initState = function initState(){
        // Disable inputs until response edition.
        renderer.disable(this.widget.element);
    };

    var exitState = function exitState(){
        // Enable inputs until response edition.
        renderer.enable(this.widget.element);
    };
    var regexChar = /\^\[\\s\\S\]\{\d+\,(\d+)\}\$/,
        regexWords =  /\^\(\?\:\(\?\:\[\^\\s\\:\\!\\\?\\\;\\\…\\\€\]\+\)\[\\s\\:\\!\\\?\\;\\\…\\\€\]\*\)\{\d+\,(\d+)\}\$/;

    var ExtendedTextInteractionStateQuestion = stateFactory.extend(Question, initState, exitState);

    function parsePattern(pattern,type){
        if (pattern === undefined || pattern === null){
            return null;
        }
        if (type === "words") {
            //expre = /^(?:(?:[^\s\:\!\?\;\…\€]+)[\s\:\!\?\;\…\€]*){0,3}$/;
            var result = pattern.match(regexWords);

            if (result !== null && result.length > 1) {
                return result[1];
            }else{
                return null;
            }
        }else if (type === "chars"){
            // This is the original regExp generated by our code
            // expre = /^[\s\S]{0,10}$/;
            // and we will try to extract the top limit from it with this regexp
            // wich is mostly just escaped version of the first one.
            var result = pattern.match(regexChar);

            if (result !== null && result.length > 1) {
                return result[1];
            }else{
                return null;
            }
        }else{
            return null;
        }
    }

    ExtendedTextInteractionStateQuestion.prototype.initForm = function(){

        var _widget = this.widget,
            $form = _widget.$form,
            interaction = _widget.element,
            format = interaction.attr('format'),
            patternMask = interaction.attr('patternMask'),
            expectedLength = parseInt(interaction.attr('expectedLength'), 10),
            expectedLines = parseInt(interaction.attr('expectedLines'),10),
            maxWords = parseInt(parsePattern(patternMask,'words'),10),
            maxChars = parseInt(parsePattern(patternMask,'chars'),10);

        var formats = {
            plain : {label : __("Plain text"), selected : false},
            preformatted : {label : __("Pre-formatted text"), selected : false},
            xhtml : {label : __("XHTML"), selected : false}
        };

        var constraints = {
            none : {label : __("None"), selected : true},
            maxLength : {label : __("Max Length"), selected : false},
            maxWords : {label : __("Max Words"), selected : false},
            pattern : {label : __("Pattern"), selected : false}
        };

        /**
         * Set the selected on the right items before sending it to the view for constraints
         */
        if ( !isNaN(maxWords) && maxWords > 0) {
            constraints.none.selected = false;
            constraints.maxWords.selected = true;
        }else if (!isNaN(maxChars) && maxChars > 0) {
            constraints.none.selected = false;
            constraints.maxLength.selected = true;
        }else if( patternMask !== null && patternMask !== undefined && patternMask !== ""){
            constraints.none.selected = false;
            constraints.pattern.selected = true;
        }
        /**
         * Set the selected on the right items before sending it to the view for formats
         */
        if(formats[format]){
            formats[format].selected = true;
        }



        $form.html(formTpl({
            formats : formats,
            patternMask : patternMask,
            maxWords : maxWords,
            maxLength : maxChars,
            expectedLength : expectedLength,
            expectedLines : expectedLines,
            constraints : constraints

        }));

        formElement.initWidget($form);
        //  init data change callbacks
        var callbacks = {};

        // -- format Callback
        callbacks.format = function(interaction, attrValue){
            var response = interaction.getResponseDeclaration();
            var correctResponse = _.values(response.getCorrect());
            var previousFormat = interaction.attr('format');

            interaction.attr('format', attrValue);
            renderer.updateFormat(interaction, previousFormat);

            if(previousFormat === 'xhtml'){
                if(typeof correctResponse[0] !== 'undefined'){
                    // Get a correct response with all possible html tags removed.
                    // (Why not let jquery do that :-) ?)
                    response.setCorrect($('<p>' + correctResponse[0] + '</p>').text());
                }
            }
        };
        callbacks.constraint = function(interaction,attrValue){
            $('[id|="constraint"]').hide('500');
            $('#constraint-' + attrValue).show('1000');
            if (attrValue === "none") {
                interaction.attr('patternMask',null);
                $('[name="maxWords"]').val('');
                $('[name="maxLength"]').val('');
            }
        };
        callbacks.maxWords = function(interaction, attrValue){
            // 1. Reset maxLength
            $('[name="maxLength"]').val('');
            $('[name="patternMask"]').val('');

            var newValue = parseInt(attrValue,10);
            if (! isNaN(newValue)) {
                var newPattern = '/^(?:(?:[^\\s\\:\\!\\?\\;\\…\\€]+)[\\s\\:\\!\\?\\;\\…\\€]*){0,' + newValue.toString() + '}$/';
                interaction.attr('patternMask', newPattern);
            }
        };
        callbacks.maxLength = function(interaction, attrValue){
            // 1. Reset maxWords
            $('[name="maxWords"]').val('');
            $('[name="patternMask"]').val('');

            var newValue = parseInt(attrValue,10);
            if(! isNaN(newValue)){
                var newPattern ='/^[\\s\\S]{0,' + newValue.toString() + '}$/';
                interaction.attr('patternMask', newPattern);
            }
        };
        callbacks.patternMask = function(interaction, attrValue){
            interaction.attr('patternMask', attrValue);
            /**
             * If anything is entered inside the patternMask, reset maxWords / maxLength(interaction, attrValue)
             */
            $('[name="maxWords"]').val('');
            $('[name="maxLength"]').val('');
        };

        callbacks.expectedLength = function(interaction, attrValue){
            var newValue = parseInt(attrValue,10);
            if(! isNaN(newValue)){
                interaction.attr('expectedLength', attrValue);
            }else{
                interaction.attr('expectedLength', -1);
            }
        };

        callbacks.expectedLines = function(interactions, attrValue){
            var newValue = parseInt(attrValue,10);
            if(! isNaN(newValue)){
                interaction.attr('expectedLines', attrValue);
            }else{
                interaction.attr('expectedLines',-1);
            }
        };

        formElement.setChangeCallbacks($form, interaction, callbacks);
    };

    return ExtendedTextInteractionStateQuestion;
});
